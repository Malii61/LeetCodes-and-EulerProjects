https://leetcode.com/problems/longest-palindromic-substring/

Problem:

Given a string s, return the longest palindromic substring in s.


Solution1 (Doesn't work at all testcase):

public class Solution {
    public string LongestPalindrome(string s)
        {
            int start = 0;
            int end;
            char p;
            string dummyPalindrom = "";
            string palindrom = "";
            int i = 0;
            int max = 0;
            bool reverse = false;
            char middleChar = ' ';
            if (s.Length == 1)
            {
                return s;
            }
            while (start < s.Length - 1)
            {
                p = s[start];
                end = start + 1;
                while (end <= s.Length -1)
                {
                    if (s[end] == p)
                    {
                        while (start + i < end - i)
                        {
                            if (s[start + i] == s[end - i])
                            {
                                dummyPalindrom += s[start + i];
                                reverse = true;
                                i++;
                            }
                            else { break; }
                        }
                        if (dummyPalindrom.Length > max)
                        {
                            max = dummyPalindrom.Length;
                            palindrom = dummyPalindrom;
                            try
                            {
                               if (s[start + i] != s[start + i - 1] || (s[start + i - 1] == s[start + i ] && s[start + i] == s[start + i +1]))                                                                
                                {
                                    middleChar = s[start + i];
                                }
                            }
                            catch { }
                            
                        }
                    }
                    dummyPalindrom = "";
                    i = 0;
                    end++;
                }
                start++;
            }
            if (reverse)
            {
                if(middleChar != ' ')
                {
                    return palindrom + middleChar+ Reverse(palindrom);
                }
                return palindrom + Reverse(palindrom);
            }
            else if (palindrom.Length == 0)
            {
                string a = "";
                return a + s[0];
            }
            else return palindrom;
        }
        public static string Reverse(string s)
        {
            char[] charArray = s.ToCharArray();
            Array.Reverse(charArray);
            return new string(charArray);
        }
    }
    
----------------------------------------------------------------------------------------------------------------------------------------------------------


    Solution2 (unfinished):
    
   public class Solution {
     public string LongestPalindrome(string s)
          {
              if (s == null || s.Length == 0) return "";
              int maxStart = 0; 
              int maxEnd = 0;
              for(int i  = 0; i<s.Length; i++)
              {
                  int start = i;
                  int end = i;
                  while ((start > 0 && end < s.Length - 1 && s[start - 1] == s[end + 1])) { 
                      start--;
                      end++; 
                  }

                  if (end - start > maxEnd - maxStart) {
                      maxStart = start;
                      maxEnd = end; 
                  }

              }

              return s.Substring(maxStart, maxEnd - maxStart + 1);
          }
    }

